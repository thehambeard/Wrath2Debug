This bat will create a debug copy of the game for you.
Required to be installed first:
dnSpy
dotpeek
Unity 2019.4.26f1

Required but included: (no install needed)
de4dot
pdb2mdb

Setup:
Select 3 folders where the Release version of the game, the folder where the debug is (if first time pick the folder where you want it to be), and the Unity path are. Release and Debug can't be in the same directory.  The normal locations used for these are prefilled in, if it doesn't match your system adjust accordingly.
Select 2 files, the DotPeek exe, usually dotPeek64.exe and dnSpy exe, usually dsSpy.exe.  You will only have to set this up once as long as your paths don't change in the future.  This will make upgrading to a new version of the game much easier as there is no setup needed.

After setup, click start.  You will get a warning that the DEBUG directory will be cleared.  If there is anything that isn't in the mod folder that you would like to save, now is the time to do so.  That circumstance is rather limited.  It is advised that you have UnityModManager installed and up to date on your Release version to update the Debug automatically.  You will have to install UnityModManager in the debug build if you do not.

THE ONLY DIRECTORY THAT WILL HAVE POTENTIAL DATA LOSS IS WHAT YOU HAVE DEBUG WRATH SET TO! YOU HAVE BEEN WARNED, I ACCEPT NO RESPONSIBITY IN ANY DATA LOSS. ANYTHING INSIDE DEBUG WRATH PATH EXCEPT THE MODS FOLDER WILL BE GONE.

DotPeek: The application will launch and wait for you to complete the dotpeek step.  Any UI driven tool needed to complete the process will be like this.  DO NOT close the main app.
 * With dotpeek we will export the assembly to a project.
 * Load the assembly, Assembly-CSharp.dll by going to file->open and then the path to the assembly in the DEBUG wrath folder.  The assembly is located in ./Wrath_Data/Managed
 * Right click on the assembly in the Assembly Explorer and select Export to Project
 * Just ensure that only "Create *.pdb file" is checked. And save to the defualt directory it suggests.
 * This step can take a WHILE, you can see the progress in the bottom right corner of dotpeek.  Don't mistake it for crashing/hanging.  It is done once it stops saying Generating 1 item.
 * Once it is fully completed close only the dotpeek window and the bat will resume automatically.
 * You may notice that there is a new folder along side your Assembly-CSharp with the same name.  This has a completely decompiled version of the assembly.  Use it as you wish, version control, 
		you can generate the sln with the pdb from above and load it in Visual Studio, etc.  It isn't important to this process though, just leave it how it is.

dnSpy Step: dnSpy will launch next, very similar to the above set.
 * Ensure that the Assembly-CSharp.dll from your debug wrath folder is in the Assembly Explorer, if not open it using File-> Open again in the ./Wrath_Data/Managed folder.
 * Click on the very top level of the Assembly-CSharp (0.0.0.0)
 * It should show you a few lines for the assembly atributes.
 * In the window with the attributes, right click and select Edit Assembly Attributes
 * This will open a new window with the same information but you can edit it
 * Replace [assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
 * With:
	[assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default | DebuggableAttribute.DebuggingModes.DisableOptimizations
  | DebuggableAttribute.DebuggingModes.EnableEditAndContinue | DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
 * Click the compile button in the bottom right of the window.
 * Now that they are edited, we need to save it. File -> Save Module
 * Save window will pop up leave everything how it is on the first tab.
 * Go to the second tab, labeled MD Writer Options
 * Ensure all the boxes are checked with the exception of "Keep Old MaxStack Value", that one is unchecked
 * Click Ok
 * After the module is saved, close dnSpy

Connecting the debugger (Visual Studio)
 * VERY IMPORTANT: You must set your advanced build options. Right click on the c# project, not the solution and select properties. Go to build on the left side of the window and select advanced. In output select Debugging Information: Portable.
 * Launch the debug build, a pop up says you can attach the debugger.
 * In VS go to Debug -> Attach Unity Debugger
 * Select you Unity Instance.  Ensure it is the debug game, not the Unity editor.  They will both be in the list if open at the same time.
 * You are ready now to debug, click ok on the original pop up saying you could attach the debugger.
 * The game should launch.
 * In the VS window, you should have a list of modules. Search for your project name. If the mod is loaded by Unity Mod Manager then it should be in the list
 * If under Symbol Status it states that Symbols not loaded, right click and select load symbols. It should say symbols loaded after that.
 * You should be all set to live debug now and use break points.
 * Note: if you use the reload function from UMM on your mod, you will no longer be able to live debug in your assembly.  A restart of the game will fix that.
